#spring:
#  data:
#    mongodb:
#      uri: mongodb://localhost:27017/HistoryServiceDB
#      uuid-representation: standard
#      auto-index-creation: false
#  security:
#    oauth2:
#      resourceserver:
#        jwt:
#          issuer-uri: http://localhost:8080/realms/microservices-realm
#  kafka:
#    bootstrap-servers: kafka:29092, localhost:9092
#    consumer:
#      group-id: history-group
#      auto-offset-reset: earliest
#      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
#      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
#      properties:
#        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
#        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
#        spring.json.type.mapping: "com.utochkin.orderservice.dto.OrderDtoForKafka:com.utochkin.historyservice.dto.OrderDtoForKafka"
#        spring.json.trusted.packages: "com.utochkin.orderservice.dto,com.utochkin.historyservice.dto"
#eureka:
#  instance:
#    prefer-ip-address: true
#  client:
#    service-url:
#      register-with-eureka: true
#      fetch-registry: true
#      defaultZone: http://localhost:8070/eureka
#server:
#  port: 8184

spring:
  cloud:
    compatibility-verifier:
      enabled: false
  zipkin:
    base-url: http://zipkin:9411/
    sender:
      type: web
  data:
    mongodb:
      uri: mongodb://admin:pass@mongo:27017/HistoryServiceDB?authSource=admin
      uuid-representation: standard
      auto-index-creation: false
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/microservices-realm
  kafka:
    bootstrap-servers: kafka:29092, localhost:9092
    consumer:
      group-id: history-group
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.type.mapping: "com.utochkin.orderservice.dto.OrderDtoForKafka:com.utochkin.historyservice.dto.OrderDtoForKafka"
        spring.json.trusted.packages: "com.utochkin.orderservice.dto,com.utochkin.historyservice.dto"
eureka:
  client:
    register-with-eureka: true
    fetch-registry:    true
    service-url:
      defaultZone: http://eureka-server:8761/eureka/
server:
  port: 8184
management:
  tracing:
    sampling:
      probability: 0.1
  prometheus:
    metrics:
      export:
        enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,trace
  endpoint:
    prometheus:
      access: unrestricted
  zipkin:
    tracing:
      endpoint: http://zipkin:9411/api/v2/spans
logging:
  level:
    root: INFO
  logstash:
    host: logstash
    port: 5000